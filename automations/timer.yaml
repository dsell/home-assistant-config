- alias: 'Intent Timer Set'
  trigger:
    - platform: mqtt
      topic: +/set_timer
    - platform: event
      event_type: rhasspy_SetTimer
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.timerhours
        value: >-
          0
          {%- set words = trigger.payload.split(' ') -%}
          {%- for word in words -%}
            {%- if word == 'hour' or word == 'hours' -%}
              {%- set value = words[loop.index0|int-1] | int -%}
              {%- if value | int -%}{{ value }}
              {%- endif -%}
          {%- endif -%}
          {%- endfor -%}
    - service: input_number.set_value
      data_template:
        entity_id: input_number.timerminutes
        value: >-
          0
          {%- set words = trigger.payload.split(' ') -%}
          {%- for word in words -%}
            {%- if word == 'minute' or word == 'minutes' -%}
              {%- set value = words[loop.index0|int-1] | int -%}
              {%- if value | int -%}{{ value }}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
    - service: input_number.set_value
      data_template:
        entity_id: input_number.timerseconds
        value: >-
          0
          {%- set words = trigger.payload.split(' ') -%}
          {%- for word in words -%}
            {%- if word == 'second' or word == 'seconds' -%}
              {%- set value = words[loop.index0|int-1] | int -%}
              {%- if value | int -%}{{ value }}
              {%- endif -%}              
            {%- endif -%}
          {%- endfor -%}
    - service: input_boolean.turn_off
      entity_id: input_boolean.timer_start
    - service: input_boolean.turn_on
      entity_id: input_boolean.timer_start


- alias: 'Intent Timer Remaining'
  trigger:
    - platform: mqtt
      topic: +/remaining_timer
    - platform: event
      event_type: rhasspy_TimeRemaining
  action:
    - service: script.remaining_timer
        
        
- alias: 'Intent Timer Cancel'
  trigger:
    - platform: mqtt
      topic: +/cancel_timer
    - platform: event
      event_type: rhasspy_TimerCancer
    - platform: state
      entity_id: input_boolean.timer_start
      from: 'on'
      to: 'off'
  condition:
    - condition: template
      value_template: >-
        {{ states('timer.user_timer') == "active" }}  
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.timer_start
    - service: timer.cancel
      data:
         entity_id: timer.user_timer
    - service: script.zanzito_say
      data:
        dest_id: "DennisPhone"
        message: >-
          "OK,  Timer canceled."       
          
- alias: 'Timer Expired'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.user_timer
  action:
    - service: script.zanzito_say
      data:
        dest_id: "DennisPhone"
        message: >-
         "Timer expired."
    - delay: 
        seconds: 2
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.zanzito_play_alarm
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.timer_start        
        
- alias: 'Intent Timer Silence Alarm'
  trigger:
    - platform: mqtt
      topic: +/timer_ack
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.zanzito_play_alarm
        

- alias: 'Event Alarm Timer Switch'
  trigger:
    - platform: state
      entity_id: input_boolean.timer_start
      from: 'off'
      to: 'on'
  action:
    - service: script.zanzito_say
      data_template:
        dest_id: "DennisPhone"
        message: >-
          OK,  Timer started for {% if (states("input_number.timerhours") | int) > 0 %} {{ states("input_number.timerhours") | int }} hours, {% endif %} {% if (states("input_number.timerminutes") | int) > 0 %} {{ states("input_number.timerminutes") | int }} minutes, {% endif %} {% if (states("input_number.timerseconds") | int) > 0 %} {{ states("input_number.timerseconds") | int }} seconds. {% endif %}
    - service: script.reset_timer
      data_template:
        delay_seconds: '{{ states("input_number.timerseconds") }}' 
        delay_minutes: '{{ states("input_number.timerminutes") }}' 
        delay_hours: '{{ states("input_number.timerhours") }}'